// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "GPU_WFC_Utils.cginc"

uniform int nb_patterns;
uniform int width, height;
uniform bool is_periodic;

/*
Actual wave result
wave(uint2(node, pattern))
*/
RWStructuredBuffer<bool> wave_data;
#define wave(node, pattern) wave_data[node * nb_patterns + pattern]

//TODO: these textures should be doubles. Would need packing into separate channels.
StructuredBuffer<float> weighting;
#define weight(pattern) weighting[pattern * 2]
#define log_weight(pattern) weighting[pattern * 2 + 1]

/* Packed in order to use less registers */
RWStructuredBuffer<float> memoisation;
#define sum_of_weights(node) memoisation[node]
#define sums_of_weight_log_weights(node) memoisation[node + width * height]
#define entropies(node) memoisation[node + width * height * 2]

/* Holds the number of possible pattern for each cell */
RWStructuredBuffer<int> num_possible_patterns;

/*
Which patterns can be placed in which direction of the current node
propagator[uint3(pattern, otherPattern, direction)]
*/
uniform Texture3D<bool> propagator;

/*
How many patterns in specific direction of cell are compatible.
*/
RWStructuredBuffer<int> compatible_data;
#define compatible(node, pattern, direction) compatible_data[node * nb_patterns * 4 + pattern * 4 + direction]

/* Neighbours of cells that changed. */
uniform StructuredBuffer<bool> in_needs_collapse;
RWStructuredBuffer<bool> out_needs_collapse;

/* Cells in which the patterns changed. */
uniform StructuredBuffer<bool> in_is_collapsed;
RWStructuredBuffer<bool> out_is_collapsed;

/*
Which pattern changed.
input_pattern_change[uint3(nodeX, nodeY, pattern)]
*/
uniform StructuredBuffer<bool> in_pattern_collapsed_data;
RWStructuredBuffer<bool> out_pattern_collapsed_data;
#define in_pattern_collapsed(node, pattern) in_pattern_collapsed_data[node * nb_patterns + pattern]
#define out_pattern_collapsed(node, pattern) out_pattern_collapsed_data[node * nb_patterns + pattern]

RWStructuredBuffer<bool> result;
#define is_possible result[0]
#define open_nodes result[1]

 /* Removes pattern from cell and marks the surrounding cells for update. */
inline void Ban(uint node, uint2 nodeCoord, int pattern)
{
    if (!wave(node, pattern)) return;
    
    wave(node, pattern) = false;
    out_pattern_collapsed(node, pattern) = true;

    num_possible_patterns[node] -= 1;
    sum_of_weights(node) -= weight(pattern);
    sums_of_weight_log_weights(node) -= log_weight(pattern);

    const float sum = sum_of_weights(node);
    entropies(node) = log(sum) - sums_of_weight_log_weights(node) / sum;
    if (num_possible_patterns[node] <= 0)
    {
        is_possible = false;
    }
    
    /* Mark the neighbouring nodes for collapse and update info */
    out_is_collapsed[node] = true;
    for (int direction = 0; direction < 4; direction++)
    {
        /* Generate neighbour coordinate */
        int x2 = nodeCoord.x + directions_x[direction];
        int y2 = nodeCoord.y + directions_y[direction];

        if (is_periodic)
        {
            x2 = ((uint)(x2 + width)) % width;
            y2 = ((uint)(y2 + height)) % height;
        }
        else if (!is_periodic && (x2 < 0
                               || y2 < 0
                               || x2 >= width 
                               || y2 >= height))
        {
            continue;
        }

        const uint node2 = y2 * width + x2;
        out_needs_collapse[node2] = true;
    }
    open_nodes = true;
}

[numthreads(16,16,1)]
void CSMain (uint3 nodeCoord : SV_DispatchThreadID)
{
    const int node =  nodeCoord.y * width + nodeCoord.x;
    if (!in_needs_collapse[node]) return;
    for (uint direction = 0; direction < 4; direction++)
    {
        /* Generate neighbour coordinate */
        int x2 = nodeCoord.x + directions_x[direction];
        int y2 = nodeCoord.y + directions_y[direction];

        if (is_periodic)
        {
            x2 = ((uint)(x2 + width)) % width;
            y2 = ((uint)(y2 + height)) % height;
        }
        else if (!is_periodic && (x2 < 0
                               || y2 < 0
                               || x2 >= width 
                               || y2 >= height))
        {
            continue;
        }

        const int node2 = y2 * width + x2;
        if (!in_is_collapsed[node2]) continue;
        
        /* Update compatibility with all removed patterns from the neighbouring node. */
        for (int removed_pattern = 0; removed_pattern < nb_patterns; removed_pattern++)
        {
            /* Check if the pattern was removed from the neighbouring node. */
            if (in_pattern_collapsed(node2, removed_pattern))
            {
                /* Go through all compatible patterns of this cell and decrease them accordingly. */
                for (int compatiblePattern = 0; compatiblePattern < nb_patterns; compatiblePattern++)
                {
                    if (propagator[uint3(removed_pattern, compatiblePattern, opposite_direction[direction])])
                    {
                        /* Ban pattern from node when it comes incompatible with other node. */
                        if (--compatible(node, compatiblePattern, direction) == 0)
                        {
                            Ban(node, nodeCoord.xy, compatiblePattern);
                        }
                    }
                }
            }
        }
    }
}