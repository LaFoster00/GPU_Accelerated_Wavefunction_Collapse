// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Include/CommonFunctionLib.cginc"

/*
Actual wave result
wave(node, pattern)
*/
StructuredBuffer<bool> wave_in;
#define WAVE_IN(node, pattern) wave_in[node * nb_patterns + pattern]


[numthreads(4,4,1)]
void CSMain (uint3 nodeCoord : SV_DispatchThreadID)
{
    const int node =  nodeCoord.y * width + nodeCoord.x;
    
    /* Return execution if node is outside of working grid. */
    if (node >= width * height) return;
    
    /* Copy current state of wave to output. Needed to ensure output is always up to date. */
    for (int pattern = 0; pattern < nb_patterns; pattern++)
    {
        WAVE_OUT(node, pattern) = WAVE_IN(node, pattern);
    }

    /* If there arent any open nodes dont execute. This ensures that we dont waste computational power on unnecessary iterations*/
    if (FINISHED == TRUE || IS_POSSIBLE == FALSE) return;
    
    if (IN_NEEDS_COLLAPSE(node) == FALSE) return;
    
    for (int direction = 0; direction < 4; direction++)
    {
        /* Generate neighbour coordinate */
        int x2 = (int)nodeCoord.x + directions_x[direction];
        int y2 = (int)nodeCoord.y + directions_y[direction];

        if (is_periodic)
        {
            x2 = (x2 + width) % width;
            y2 = (y2 + height) % height;
        }
        else if (!is_periodic && (x2 < 0
                                       || y2 < 0
                                       || x2 >= width
                                       || y2 >= height))
        {
            continue;
        }

        const int node2 = y2 * width + x2;

        /*
         * Go over all still possible patterns in the current node and check if the are compatible
         * with the still possible patterns of the other node.
         */
        for (int this_node_pattern = 0; this_node_pattern < nb_patterns; this_node_pattern++)
        {
            /* Go over each pattern of the active node and check if they are still active. */
            if (WAVE_IN(node, this_node_pattern) == FALSE) continue;
            /*
             * Go over all possible patterns of the other cell and check if any of them are compatible
             * with the possibleNodePattern
             */
            bool any_possible = false;
            for (int other_node_pattern = 0; other_node_pattern < nb_patterns; other_node_pattern++)
            {
                if (WAVE_IN(node2, other_node_pattern) == TRUE)
                {
                    if (PROPAGATOR(this_node_pattern, other_node_pattern, direction) == TRUE)
                    {
                        any_possible = true;
                        break;
                    }
                }
            }

            /* If there were no compatible patterns found Ban the pattern. */
            if (!any_possible)
            {
                Ban(node, nodeCoord.xy, this_node_pattern);
            }
        }
    }
}
