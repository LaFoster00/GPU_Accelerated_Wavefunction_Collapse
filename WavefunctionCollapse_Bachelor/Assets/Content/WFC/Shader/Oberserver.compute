// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Include/CommonFunctionLib.cginc"
#include "Include/GpuRandom.cginc"

struct ObserverParams
{
    uint random_state;
};
RWStructuredBuffer<ObserverParams> observer_params;
#define RANDOM_STATE observer_params[0].random_state

static int random_from_distribution(RWStructuredBuffer<Weighting> weighting, const int nb_patterns, const float threshold)
{
    float sum = 0;
    for (int p = 0; p < nb_patterns; p++)
    {
        sum += DISTRIBUTION(p);
    }
    
    for (int p2 = 0; p2 < nb_patterns; p2++)
    {
        DISTRIBUTION(p2) /= sum;
    }
        
    float x = 0;
        
    for (int p3 = 0; p3 < nb_patterns; p3++)
    {
        x += DISTRIBUTION(p3);
        if (threshold <= x) return p3;
    }
        
    return 0;
}

void observe(const int node, const uint2 node_coord)
{
    for (int p1 = 0; p1 < nb_patterns; p1++)
    {
        DISTRIBUTION(p1) = WAVE(node, p1) == TRUE ? WEIGHT(p1) : 0.0f;
    }

    const int r = random_from_distribution(weighting, nb_patterns, random_next_float());
    for (int p2 = 0; p2 < nb_patterns; p2++)
    {
        if ((WAVE(node, p2) == TRUE) != (p2 == r))
        {
            Ban(node, node_coord, p2);
        }
    }
}

int next_unobserved_node()
{
    float min = FLOAT_MAX;
    int argmin = -1;
    for (uint node = 0; node < (uint)(height * width); node++)
    {
        if (!is_periodic && (node % width + pattern_size > width || node / width + pattern_size > height)) continue;
        const int remaining_values = NUM_POSSIBLE_PATTERNS(node);
        const float entropy = ENTROPIES(node);
        if (remaining_values > 1 && entropy <= min)
        {
            const float noise = 1E-6 * random_next_float();
            if (entropy + noise < min)
            {
                min = entropy + noise;
                argmin = node;
            }
        }
    }

    return argmin;
}

// Start only one thread when executing this as it is a single threaded calculation and should be treated as such.
[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (OPEN_NODES == TRUE || FINISHED == TRUE || IS_POSSIBLE == FALSE) return;
    
    random_init_state(RANDOM_STATE);

    const int node = next_unobserved_node();
    if (node >= 0)
    {
        observe(node, uint2(node % width, node / width));
        FINISHED = FALSE;
    }
    
    RANDOM_STATE = state;
}
